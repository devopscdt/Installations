This file describes the steps to install kubernetes cluster using kubeadm.

Verify the prerequisites
-----------------------------------
1. Have 3 Linux nodes with Ubuntu OS with below configurations
   Example IPs:- 10.0.0.30(master/control plane),10.0.0.31(worker node1),10.0.0.32(worker node2)
2. 2 GB or more of RAM per machine -- check with command free -gh
3. 2 CPUs or more.-- check with command lscpu
4. Full network connectivity between all machines in the cluster (public or private network is fine).-- we can check with ping command in each node
5. Unique hostname, MAC address, and product_uuid for every node.We can check with below commands
    hostnamectl
    ip link
     sudo cat /sys/class/dmi/id/product_uuid
6. Certain ports are open on your machines. See https://kubernetes.io/docs/reference/networking/ports-and-protocols/ for more details.
7. Disable swap in each node.We can do either of below steps for this.
   swapoff -a (for temporairly disabling)
   Comment swap section in /etc/fstab (For permenantly disabling the swap)


Install Container Runtime
------------------------------
Before installing container runtime,enable ip forwarding in each of the nodes.

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system
Verify that net.ipv4.ip_forward is set to 1 with:
sysctl net.ipv4.ip_forward

We can install any of the supported runtime in each of the nodes.For this demo, We are choosing containerd.
We can follow instructions in below link for installing containerd in each of the nodes.
https://docs.docker.com/engine/install/ubuntu/

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install containerd.io

verify whether containerd is up and running with below command.
systemctl status containerd

Configure containerd to use systemd cgroup driver.
Open /etc/containerd/config.toml and add below. Also comment out disabled_plugins in the same file.

[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true

Restart Containerd
systemctl status containerd

Install kubeadm, kubelet and kubectl
-------------------------------------------------------------------
Execute below commands in all nodes to install  kubeadm, kubelet and kubectl

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
sudo systemctl enable --now kubelet

Setup the Control plane node
-----------------------------------------------------------------------
In the Control plane(master) node, Execute below steps.
kubeadm init --apiserver-advertise-address 10.0.0.30 --pod-network-cidr 172.16.0.0/16

Copy the output of above command to some textpad/notepad.
Now execute below commands as in output with a OS user which we want to access k8s cluser in master node

   mkdir -p $HOME/.kube
   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   sudo chown $(id -u):$(id -g) $HOME/.kube/config

Install CNI plugin(flannel)
---------------------------------------------------
In controle plane node execute below comamnds.

wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

Update below in kube-flannel.yml. The interface(--iface) needs to be added if virtual box used to create VMs.
"Network": "172.16.0.0/16"

      containers:
      - args:
        - --ip-masq
        - --kube-subnet-mgr
		- --iface eth1

Apply flannel configuration in cluster
kubectl apply -f kube-flannel.yml

Veirfy all pods running without any issues.
kubectl get pods --all-namespaces
  

Join worker nodes to cluster
---------------------------------
Copy the below command from the output in notepad and execute in all worker nodes and make sure they joined cluster.

kubeadm join <control-plane-host>:<control-plane-port> --token <token> --discovery-token-ca-cert-hash sha256:<hash>

verify all nodes are ready and all pods up and running.
kubectl get nodes
kubectl get pods --all-namespaces

Verify cluster operation with an example
------------------------------------------------
Take an example application and deploy it in the cluster to make sure the pods are running without any issues.
